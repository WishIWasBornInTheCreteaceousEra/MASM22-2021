else{
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we ACCEPT", chisq, HL[[1]]))
}
HL.df <- data.frame(group = seq(1, git),
Obs0 = HL$observed[, 1],
Obs1 = HL$observed[, 2],
Exp0 = HL$expected[, 1],
Exp1 = HL$expected[, 2])
ggplot(HL.df, aes(x = group)) +
geom_line(aes(y = Obs0, linetype = "observed", color = "Y = 0"), size = 1) +
geom_line(aes(y = Obs1, linetype = "observed", color = "Y = 1"), size = 1) +
geom_line(aes(y = Exp0, linetype = "expected", color = "Y = 0"), size = 1) +
geom_line(aes(y = Exp1, linetype = "expected", color = "Y = 1"), size = 1) +
labs(title = sprintf("%s Model: Observed and expected in each group", Model.names[i]),
y = "number of observations") +
scale_x_continuous(breaks = seq(1, 11)) +
theme(text = element_text(size = 14))
ggsave(sprintf("HLT %s%i.svg", Model.names[i], i))
git=git+1
}
}
install.packages("svglite")
for(i in 1:4){
exp<-20 #Completely arbitrary number >5
git<-length(Model.list[[i]]$coefficients)+1
P3.sort<-P3.pred[order(P3.pred[I(16+i)]), ]
while(exp>5){
HL<-hoslem.test(P3.pred$lowplasma, P3.sort[, I(16+i)], g = git)
exp=min(HL$expected)
chisq=qchisq(1 - 0.05, git - 2)
print(sprintf("Smallest expected number in a group of %s model for g=%i is %f", Model.names[i], git, exp))
if(chisq<HL[1]){
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we REJECT", chisq, HL[[1]]))
}
else{
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we ACCEPT", chisq, HL[[1]]))
}
HL.df <- data.frame(group = seq(1, git),
Obs0 = HL$observed[, 1],
Obs1 = HL$observed[, 2],
Exp0 = HL$expected[, 1],
Exp1 = HL$expected[, 2])
ggplot(HL.df, aes(x = group)) +
geom_line(aes(y = Obs0, linetype = "observed", color = "Y = 0"), size = 1) +
geom_line(aes(y = Obs1, linetype = "observed", color = "Y = 1"), size = 1) +
geom_line(aes(y = Exp0, linetype = "expected", color = "Y = 0"), size = 1) +
geom_line(aes(y = Exp1, linetype = "expected", color = "Y = 1"), size = 1) +
labs(title = sprintf("%s Model: Observed and expected in each group", Model.names[i]),
y = "number of observations") +
scale_x_continuous(breaks = seq(1, 11)) +
theme(text = element_text(size = 14))
ggsave(sprintf("HLT %s%i.svg", Model.names[i], i))
git=git+1
}
}
for(i in 1:4){
exp<-20 #Completely arbitrary number >5
git<-length(Model.list[[i]]$coefficients)+1
P3.sort<-P3.pred[order(P3.pred[I(16+i)]), ]
while(exp>5){
HL<-hoslem.test(P3.pred$lowplasma, P3.sort[, I(16+i)], g = git)
exp=min(HL$expected)
chisq=qchisq(1 - 0.05, git - 2)
print(sprintf("Smallest expected number in a group of %s model for g=%i is %f", Model.names[i], git, exp))
if(chisq<HL[1]){
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we REJECT", chisq, HL[[1]]))
}
else{
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we ACCEPT", chisq, HL[[1]]))
}
HL.df <- data.frame(group = seq(1, git),
Obs0 = HL$observed[, 1],
Obs1 = HL$observed[, 2],
Exp0 = HL$expected[, 1],
Exp1 = HL$expected[, 2])
ggplot(HL.df, aes(x = group)) +
geom_line(aes(y = Obs0, linetype = "observed", color = "Y = 0"), size = 1) +
geom_line(aes(y = Obs1, linetype = "observed", color = "Y = 1"), size = 1) +
geom_line(aes(y = Exp0, linetype = "expected", color = "Y = 0"), size = 1) +
geom_line(aes(y = Exp1, linetype = "expected", color = "Y = 1"), size = 1) +
labs(title = sprintf("%s Model: Observed and expected in each group", Model.names[i]),
y = "number of observations") +
scale_x_continuous(breaks = seq(1, 11)) +
theme(text = element_text(size = 14))
ggsave(sprintf("HLT %s%i.svg", Model.names[i], git))
git=git+1
}
}
HL
P3.sort[, 17]
P3.sort[, 16+i]
HL.df
AICintermediate.model
thresh.final
auc()
aucs
#Collect AUC and intervals for all the models:
(aucs <-
data.frame(
model = c("Age", "Background", "Diet", "Final"),
auc = c(auc(roc.age), auc(roc.background), auc(roc.diet), auc(roc.final)),
lwr = c(ci(roc.age)[1], ci(roc.background)[1],
ci(roc.diet)[1], ci(roc.final)[1]),
upr = c(ci(roc.age)[3], ci(roc.background)[3],
ci(roc.diet)[3], ci(roc.final)[3])))
#Age: Manual entry due to no p<0.5
(col.02.age <- table(P3.pred$ydhat.age))
(confusiond.age <- table(P3.pred$lowplasma, P3.pred$ydhat.age))
(specd.age <- confusiond.age[1, 1] / row.01[1])
(sensd.age <- confusiond.age[2, 2] / row.01[2])
(accud.age <- sum(diag(confusiond.age)) / sum(confusiond.age))
(precd.age <- confusiond.age[2, 2] / col.02.age[2])
(sensd.background <- confusiond.background[2, 2] / row.01[2])
(col.01.background <- table(P3.pred$yhat.background))
(confusion.background <- table(P3.pred$lowplasma, P3.pred$yhat.background))
(spec.background <- confusion.background[1, 1] / row.01[1])
(sens.background <- confusion.background[2, 2] / row.01[2])
(accu.background <- sum(diag(confusion.background)) / sum(confusion.background))
(prec.background <- confusion.background[2, 2] / col.01.background[2])
#Diet
(col.01.diet <- table(P3.pred$yhat.diet))
(confusion.diet <- table(P3.pred$lowplasma, P3.pred$yhat.diet))
(spec.diet <- confusion.diet[1, 1] / row.01[1])
(sens.diet <- confusion.diet[2, 2] / row.01[2])
(accu.diet <- sum(diag(confusion.diet)) / sum(confusion.diet))
(prec.diet <- confusion.diet[2, 2] / col.01.diet[2])
#Final
(col.01.final <- table(P3.pred$yhat.final))
(confusion.final <- table(P3.pred$lowplasma, P3.pred$yhat.final))
(spec.final <- confusion.final[1, 1] / row.01[1])
(sens.final <- confusion.final[2, 2] / row.01[2])
(accu.final <- sum(diag(confusion.final)) / sum(confusion.final))
(prec.final <- confusion.final[2, 2] / col.01.final[2])
#Question b
# ROC-curves for all models####
roc.age <- roc(lowplasma ~ p.age, data = P3.pred)
roc.df.age <- coords(roc.age, transpose = FALSE)
roc.df.age$model <- "Age"
roc.background <- roc(lowplasma ~ p.background, data = P3.pred)
roc.df.background <- coords(roc.background, transpose = FALSE)
roc.df.background$model <- "Background"
roc.diet <- roc(lowplasma ~ p.diet, data = P3.pred)
roc.df.diet <- coords(roc.diet, transpose = FALSE)
roc.df.diet$model <- "Diet"
roc.final <- roc(lowplasma ~ p.final, data = P3.pred)
roc.df.final <- coords(roc.final, transpose = FALSE)
roc.df.final$model <- "Final"
roc.df <- rbind(roc.df.age, roc.df.background, roc.df.diet,
roc.df.final)
# Plot all the curves, in different colors:
ggplot(roc.df, aes(specificity, sensitivity,
color = model)) +
geom_path(size = 1) +
coord_fixed() +       # square plotting area
scale_x_reverse() +   # Reverse scale on the x-axis!
labs(caption = "ROC-curves for all the models") +
theme(text = element_text(size = 14))
#Collect AUC and intervals for all the models:
(aucs <-
data.frame(
model = c("Age", "Background", "Diet", "Final"),
auc = c(auc(roc.age), auc(roc.background), auc(roc.diet), auc(roc.final)),
lwr = c(ci(roc.age)[1], ci(roc.background)[1],
ci(roc.diet)[1], ci(roc.final)[1]),
upr = c(ci(roc.age)[3], ci(roc.background)[3],
ci(roc.diet)[3], ci(roc.final)[3])))
# Compare the AUC for the models:
roc.test(roc.age, roc.background)
roc.test(roc.age, roc.diet)
roc.test(roc.age, roc.final)
roc.test(roc.background, roc.diet)
roc.test(roc.background, roc.final)
roc.test(roc.diet, roc.final)
#Question c: Look at modules for a simpler more visual method using the cutpointr package, consider using the plots
#from there to discuss the best threshold points.
MaxSpSe.idx<-c(which.min(sqrt((1-roc.df.age$specificity)^2+(1-roc.df.age$sensitivity)^2)),
which.min(sqrt((1-roc.df.background$specificity)^2+(1-roc.df.background$sensitivity)^2)),
which.min(sqrt((1-roc.df.diet$specificity)^2+(1-roc.df.diet$sensitivity)^2)),
which.min(sqrt((1-roc.df.final$specificity)^2+(1-roc.df.final$sensitivity)^2)))
thresh.age<-roc.df.age$threshold[MaxSpSe.idx[1]]
thresh.background<-roc.df.background$threshold[MaxSpSe.idx[2]]
thresh.diet<-roc.df.diet$threshold[MaxSpSe.idx[3]]
thresh.final<-roc.df.final$threshold[MaxSpSe.idx[4]]
P3.pred$ydhat.age <- as.numeric(P3.pred$p.age > thresh.age)
P3.pred$ydhat.background <- as.numeric(P3.pred$p.background > thresh.background)
P3.pred$ydhat.diet <- as.numeric(P3.pred$p.diet > thresh.diet)
P3.pred$ydhat.final <- as.numeric(P3.pred$p.final > thresh.final)
#Age: Manual entry due to no p<0.5
(col.02.age <- table(P3.pred$ydhat.age))
(confusiond.age <- table(P3.pred$lowplasma, P3.pred$ydhat.age))
(specd.age <- confusiond.age[1, 1] / row.01[1])
(sensd.age <- confusiond.age[2, 2] / row.01[2])
(accud.age <- sum(diag(confusiond.age)) / sum(confusiond.age))
(precd.age <- confusiond.age[2, 2] / col.02.age[2])
#Background
(col.02.background <- table(P3.pred$ydhat.background))
(confusiond.background <- table(P3.pred$lowplasma, P3.pred$ydhat.background))
(specd.background <- confusiond.background[1, 1] / row.01[1])
(sensd.background <- confusiond.background[2, 2] / row.01[2])
(accud.background <- sum(diag(confusiond.background)) / sum(confusiond.background))
(precd.background <- confusiond.background[2, 2] / col.02.background[2])
#Diet
(col.02.diet <- table(P3.pred$ydhat.diet))
(confusiond.diet <- table(P3.pred$lowplasma, P3.pred$ydhat.diet))
(specd.diet <- confusiond.diet[1, 1] / row.01[1])
(sensd.diet <- confusiond.diet[2, 2] / row.01[2])
(accud.diet <- sum(diag(confusiond.diet)) / sum(confusiond.diet))
(precd.diet <- confusiond.diet[2, 2] / col.02.diet[2])
#Final
(col.02.final <- table(P3.pred$ydhat.final))
(confusiond.final <- table(P3.pred$lowplasma, P3.pred$ydhat.final))
(specd.final <- confusiond.final[1, 1] / row.01[1])
(sensd.final <- confusiond.final[2, 2] / row.01[2])
(accud.final <- sum(diag(confusiond.final)) / sum(confusiond.final))
(precd.final <- confusiond.final[2, 2] / col.02.final[2])
(confusion.background <- table(P3.pred$lowplasma, P3.pred$yhat.background))
row.01 <- table(P3.pred$lowplasma)
#Age: Manual entry due to no p<0.5
(col.02.age <- table(P3.pred$ydhat.age))
(confusiond.age <- table(P3.pred$lowplasma, P3.pred$ydhat.age))
(specd.age <- confusiond.age[1, 1] / row.01[1])
(sensd.age <- confusiond.age[2, 2] / row.01[2])
(accud.age <- sum(diag(confusiond.age)) / sum(confusiond.age))
(precd.age <- confusiond.age[2, 2] / col.02.age[2])
#Background
(col.02.background <- table(P3.pred$ydhat.background))
(confusiond.background <- table(P3.pred$lowplasma, P3.pred$ydhat.background))
(specd.background <- confusiond.background[1, 1] / row.01[1])
(sensd.background <- confusiond.background[2, 2] / row.01[2])
(accud.background <- sum(diag(confusiond.background)) / sum(confusiond.background))
(precd.background <- confusiond.background[2, 2] / col.02.background[2])
59+88
146+21
for(i in 1:4){
exp<-20 #Completely arbitrary number >5
git<-length(Model.list[[i]]$coefficients)+1
P3.sort<-P3.pred[order(P3.pred[I(16+i)]), ]
while(exp>5){
HL<-hoslem.test(P3.pred$lowplasma, P3.sort[, I(16+i)], g = git)
exp=min(HL$expected)
chisq=qchisq(1 - 0.05, git - 2)
print(sprintf("Smallest expected number in a group of %s model for g=%i is %f", Model.names[i], git, exp))
if(chisq<HL[1]){
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we REJECT", chisq, HL[[1]]))
}
else{
print(sprintf("The Chi-sq value at a significance of .05 is %f, and chi-sq of the HL test is %f so we ACCEPT", chisq, HL[[1]]))
}
HL.df <- data.frame(group = seq(1, git),
Obs0 = HL$observed[, 1],
Obs1 = HL$observed[, 2],
Exp0 = HL$expected[, 1],
Exp1 = HL$expected[, 2])
ggplot(HL.df, aes(x = group)) +
geom_line(aes(y = Obs0, linetype = "observed", color = "Y = 0"), size = 1) +
geom_line(aes(y = Obs1, linetype = "observed", color = "Y = 1"), size = 1) +
geom_line(aes(y = Exp0, linetype = "expected", color = "Y = 0"), size = 1) +
geom_line(aes(y = Exp1, linetype = "expected", color = "Y = 1"), size = 1) +
labs(title = sprintf("%s Model: Observed and expected in each group", Model.names[i]),
y = "number of observations") +
scale_x_continuous(breaks = seq(1, 11)) +
theme(text = element_text(size = 14))
ggsave(sprintf("HLT%s%i.svg", Model.names[i], git))
git=git+1
}
}
#Project 2
library(ggplot2)
library(GGally)
library(ggpubr)
library(pROC)
library(ResourceSelection)
plasma <- read.delim("Data/plasma.txt")
head(plasma)
summary(plasma)
# At least one data point was 0, this needs to be taken
PositivePlasma <- plasma[plasma$betaplasma > 0, ]
summary(PositivePlasma)
#Turn categorical variables into factor variables:
PositivePlasma$sex <- factor(PositivePlasma$sex,
levels = c(1, 2),
labels = c("Male", "Female"))
PositivePlasma$smokstat <- factor(PositivePlasma$smokstat,
levels = c(1, 2, 3),
labels = c("Never", "Former", "Current"))
PositivePlasma$bmicat <- factor(PositivePlasma$bmicat,
levels = c(1,2,3,4),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
PositivePlasma$vituse <- factor(PositivePlasma$vituse,
levels = c(1, 2, 3),
labels = c("Yes, fairly often", "Yes, not often", "No"))
#relevel to suitable reference categories:
PositivePlasma$sex<-relevel(PositivePlasma$sex, "Female")
PositivePlasma$smokstat<-relevel(PositivePlasma$smokstat, "Never")
PositivePlasma$bmicat <- relevel(PositivePlasma$bmicat,"Normal")
PositivePlasma$vituse <- relevel(PositivePlasma$vituse,"Yes, fairly often")
#Part 0 a)
a <- 225.498
#Part 0 b) beta-carotene is considered low if below 225.498 ng/ml
PositivePlasma$lowplasma <- as.numeric(PositivePlasma$betaplasma < a)
# factor version for ease of use later on:
PositivePlasma$plasmacat <- factor(PositivePlasma$lowplasma,
levels = c(0, 1),
labels = c("high", "low"))
# How many are low?
low_total <- sum(PositivePlasma$lowplasma)
high_total <- 315 - low_total
low_percentage <- (low_total/316)*100
table(PositivePlasma$smokstat, PositivePlasma$lowplasma)
(model.1 <- glm(lowplasma ~ smokstat, family = "binomial", data = PositivePlasma))
summary(model.1)
# beta: log-odds(ratio) with c.i.:
model.1$coefficients
(ci.beta <- confint(model.1))
# Odds (exp(beta0)) and OR, odds ratio, exp(beta1), exp(beta2)
exp(model.1$coefficients)
(ci.or <- exp(ci.beta))
#probability for "Never" to have low beta-plasma:
(prob_0 <- 2.250000/(2.250000+1))
#confidence interval:
(prob_0_low <- 1.6120554/(1.6120554+1))
(prob_0_high <- 3.187487/(3.187487+1))
#probability for "Former" to have low beta-plasma:
(prob_1 <- 1.318008*prob_0/(1-prob_0)/(1+1.318008*prob_0/(1-prob_0)))
#confidence interval:
(prob_1_low <- 0.7707618*prob_0/(1-prob_0)/(1+0.7707618*prob_0/(1-prob_0)))
(prob_1_high <- 2.280987*prob_0/(1-prob_0)/(1+2.280987*prob_0/(1-prob_0)))
#probability for "Current" to have low beta-plasma:
(prob_1 <- 5.925926*prob_0/(1-prob_0)/(1+5.925926*prob_0/(1-prob_0)))
#confidence interval:
(prob_2_low <- 2.0209273*prob_0/(1-prob_0)/(1+2.0209273*prob_0/(1-prob_0)))
(prob_2_high <- 25.326220*prob_0/(1-prob_0)/(1+25.326220*prob_0/(1-prob_0)))
#Wald test
summary(model.1)$coefficients
# Lecture 7: Example 2,
# PM10-particles in Oslo, 26/4-21:
# Logistic regresssion: estimates and confidence intervals
library(ggplot2)
load("Data/pm10.rda")
head(pm10)
# Some extra variables used in lecture 8.
# highpm10 against number of cars
ggplot(pm10, aes(cars, highpm10)) +
geom_point() +
xlab("number of cars") +
ylab("High PM10") +
labs(title = "High PM10 (=1) or Not high PM10 (=0) vs number of cars") +
theme(text = element_text(size = 14))
ggplot(pm10, aes(cars, highpm10)) +
geom_point() +
geom_smooth() +
xlab("number of cars") +
ylab("High PM10") +
labs(title = "High PM10 (=1) or Not high PM10 (=0) vs number of cars") +
theme(text = element_text(size = 14))
#estimate the model####
# Note: I am using cars/1000 as x-variable instead of cars.
# This is both for numerical reasons and for interpretation
# of parameters.
glm(highpm10 ~ cars, family = "binomial", data = pm10)
(model.1 <- glm(highpm10 ~ I(cars/1000), family = "binomial", data = pm10))
# Note that beta for I(cars/1000) = 1000*beta for cars
summary(model.1)
# Look! our friend AIC.
# But no R2, residual standard error or F-test.
# Instead we have something called "deviance".
# Deviance = -2*loglikelihood. More on this next lecture.
# beta: log-odds(ratio) with c.i.:
model.1$coefficients
(ci.beta <- confint(model.1))
# Odds (exp(beta0)) and OR, odds ratio, exp(beta1)
exp(model.1$coefficients)
(ci.or <- exp(ci.beta))
# predict for plotting####
# phat = estimated probabilities p
pm10.pred <- cbind(
pm10,
phat = predict(model.1, type = "response"))
ggplot(pm10.pred, aes(cars, highpm10)) +
geom_point() +
geom_smooth(se = FALSE, linetype = "dashed") +
geom_line(aes(y = phat), color = "red", size = 1) +
xlab("number of cars") +
ylab("High PM10") +
labs(title = "High PM10 (=1) or Not high PM10 (=0) vs number of cars",
caption = "red = fitted line, blue dashed = moving average") +
theme(text = element_text(size = 14))
# logit = logodds with s.e. for constructing C.I.
pm10.pred <- cbind(
pm10.pred,
logit = predict(model.1, se.fit = TRUE))
head(pm10.pred)
# An unnecessary variable:
pm10.pred$logit.residual.scale <- NULL
# Calculate confidence intervals for the log odds####
# standard normal quantile:
(lambda <- qnorm(1 - 0.05/2))
pm10.pred$logit.lwr <- pm10.pred$logit.fit - lambda*pm10.pred$logit.se.fit
pm10.pred$logit.upr <- pm10.pred$logit.fit + lambda*pm10.pred$logit.se.fit
head(pm10.pred)
# transform the log-odds intervals into C.I. for odds####
pm10.pred$odds.lwr <- exp(pm10.pred$logit.lwr)
pm10.pred$odds.upr <- exp(pm10.pred$logit.upr)
head(pm10.pred)
# transform the odds intervals into C.I. for p####
pm10.pred$p.lwr <- pm10.pred$odds.lwr/(1 + pm10.pred$odds.lwr)
pm10.pred$p.upr <- pm10.pred$odds.upr/(1 + pm10.pred$odds.upr)
head(pm10.pred)
# plot the intervals:
ggplot(pm10.pred, aes(cars, highpm10)) +
geom_point() +
geom_line(aes(y = phat), color = "red", size = 1) +
geom_ribbon(aes(ymin = p.lwr, ymax = p.upr), alpha = 0.2) +
xlab("number of cars") +
ylab("High PM10") +
labs(title = "High PM10 (=1) or Not high PM10 (=0) vs number of cars",
caption = "red = fitted line, with 95% confidence interval") +
theme(text = element_text(size = 14))
# Wald test:
summary(model.1)$coefficients
#Project 2
library(ggplot2)
library(GGally)
library(ggpubr)
library(pROC)
library(ResourceSelection)
plasma <- read.delim("Data/plasma.txt")
head(plasma)
summary(plasma)
# At least one data point was 0, this needs to be taken
PositivePlasma <- plasma[plasma$betaplasma > 0, ]
summary(PositivePlasma)
#Turn categorical variables into factor variables:
PositivePlasma$sex <- factor(PositivePlasma$sex,
levels = c(1, 2),
labels = c("Male", "Female"))
PositivePlasma$smokstat <- factor(PositivePlasma$smokstat,
levels = c(1, 2, 3),
labels = c("Never", "Former", "Current"))
PositivePlasma$bmicat <- factor(PositivePlasma$bmicat,
levels = c(1,2,3,4),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
PositivePlasma$vituse <- factor(PositivePlasma$vituse,
levels = c(1, 2, 3),
labels = c("Yes, fairly often", "Yes, not often", "No"))
#relevel to suitable reference categories:
PositivePlasma$sex<-relevel(PositivePlasma$sex, "Female")
PositivePlasma$smokstat<-relevel(PositivePlasma$smokstat, "Never")
PositivePlasma$bmicat <- relevel(PositivePlasma$bmicat,"Normal")
PositivePlasma$vituse <- relevel(PositivePlasma$vituse,"Yes, fairly often")
#Part 0 a)
a <- 225.498
#Part 0 b) beta-carotene is considered low if below 225.498 ng/ml
PositivePlasma$lowplasma <- as.numeric(PositivePlasma$betaplasma < a)
# factor version for ease of use later on:
PositivePlasma$plasmacat <- factor(PositivePlasma$lowplasma,
levels = c(0, 1),
labels = c("high", "low"))
# How many are low?
low_total <- sum(PositivePlasma$lowplasma)
high_total <- 315 - low_total
low_percentage <- (low_total/316)*100
table(PositivePlasma$smokstat, PositivePlasma$lowplasma)
(model.1 <- glm(lowplasma ~ smokstat, family = "binomial", data = PositivePlasma))
summary(model.1)
# beta: log-odds(ratio) with c.i.:
model.1$coefficients
(ci.beta <- confint(model.1))
# Odds (exp(beta0)) and OR, odds ratio, exp(beta1), exp(beta2)
exp(model.1$coefficients)
(ci.or <- exp(ci.beta))
#probability for "Never" to have low beta-plasma:
(prob_0 <- 2.250000/(2.250000+1))
#confidence interval:
(prob_0_low <- 1.6120554/(1.6120554+1))
(prob_0_high <- 3.187487/(3.187487+1))
#probability for "Former" to have low beta-plasma:
(prob_1 <- 1.318008*prob_0/(1-prob_0)/(1+1.318008*prob_0/(1-prob_0)))
#confidence interval:
(prob_1_low <- 0.7707618*prob_0/(1-prob_0)/(1+0.7707618*prob_0/(1-prob_0)))
(prob_1_high <- 2.280987*prob_0/(1-prob_0)/(1+2.280987*prob_0/(1-prob_0)))
#probability for "Current" to have low beta-plasma:
(prob_1 <- 5.925926*prob_0/(1-prob_0)/(1+5.925926*prob_0/(1-prob_0)))
#confidence interval:
(prob_2_low <- 2.0209273*prob_0/(1-prob_0)/(1+2.0209273*prob_0/(1-prob_0)))
(prob_2_high <- 25.326220*prob_0/(1-prob_0)/(1+25.326220*prob_0/(1-prob_0)))
#Wald test
summary(model.1)$coefficients
source('~/GitHub/MASM22-2021/Project2/Project-2.R', echo=TRUE)
source('~/Bachelor Math Lund/Regression/lecture09_ex1_pm10-GOF.R', echo=TRUE)
# Plot p_i and Y_i
# Add i vertical jitter to Y_i to separate them
ggplot(pred.sort, aes(rank, p.3)) +
geom_point() +
geom_jitter(aes(y = highpm10), height = 0.01) +
geom_vline(xintercept = seq(ng, nrow(pred.sort) - ng, ng)) +
labs(title = "Model 3: Estimated probabilities by increasing size",
caption = "g = 10 groups",
x = "(i) = 1,...,n", y = "p-hat") +
theme(text = element_text(size = 14))
ggplot(HL.df.3, aes(x = group)) +
geom_line(aes(y = Obs0, linetype = "observed", color = "Y = 0"), size = 1) +
geom_line(aes(y = Obs1, linetype = "observed", color = "Y = 1"), size = 1) +
geom_line(aes(y = Exp0, linetype = "expected", color = "Y = 0"), size = 1) +
geom_line(aes(y = Exp1, linetype = "expected", color = "Y = 1"), size = 1) +
labs(title = "Model 3: Observed and expected in each group",
y = "number of observations") +
scale_x_continuous(breaks = seq(1, 11)) +
theme(text = element_text(size = 14))
# HL using hoslem.test####
# p+1:
length(model.3$coefficients)
